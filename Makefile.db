# Database Management Makefile
# Contains all database-related operations for Sorting Office

.PHONY: migrate migrate-revert migrate-reset migrate-all seed create-seed-migration test-db-setup test-db-clean test-db-reset prod-db-setup prod-db-reset list-domains count-domains list-aliases count-aliases list-users count-users

# Database configuration
MYSQL ?= mysql
MYSQL_USER ?= root
MYSQL_PASSWORD ?= rootpassword
MYSQL_DATABASE ?= sortingoffice
MYSQL_HOST ?= 127.0.0.1
MYSQL_PORT ?= 3306
MYSQL_CMD = $(MYSQL) -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) -N -e

# Optional DATABASE_URL parameter for targeting other databases
DATABASE_URL_ARG ?=

# General database operations
migrate:
	@if [ -n "$(DATABASE_URL_ARG)" ]; then \
		echo "Running migrations on $(DATABASE_URL_ARG)..."; \
		diesel migration run --database-url=$(DATABASE_URL_ARG); \
	else \
		echo "Running migrations on default database..."; \
		diesel migration run; \
	fi

migrate-revert:
	@if [ -n "$(DATABASE_URL_ARG)" ]; then \
		echo "Reverting last migration on $(DATABASE_URL_ARG)..."; \
		diesel migration revert --database-url=$(DATABASE_URL_ARG); \
	else \
		echo "Reverting last migration on default database..."; \
		diesel migration revert; \
	fi

migrate-reset:
	@if [ -n "$(DATABASE_URL_ARG)" ]; then \
		echo "Resetting migrations on $(DATABASE_URL_ARG)..."; \
		diesel migration revert --database-url=$(DATABASE_URL_ARG); \
		diesel migration run --database-url=$(DATABASE_URL_ARG); \
	else \
		echo "Resetting migrations on default database..."; \
		diesel migration revert; \
		diesel migration run; \
	fi

# Run migrations on all configured databases
migrate-all:
	@echo "üîÑ Running migrations on all configured databases..."
	@cargo run --bin migrate-all-databases 2>/dev/null || \
	(echo "‚ö†Ô∏è  Migration binary not found, running via application startup..."; \
	 echo "   This will start the application briefly to run migrations."; \
	 timeout 30s cargo run --quiet 2>/dev/null || echo "‚úÖ Migrations completed or application started successfully")

# Seed data management
seed:
	@if [ -n "$(MYSQL_DATABASE)" ]; then \
		echo "üå± Seeding database $(MYSQL_DATABASE) with initial data..."; \
		if [ -f "seed_data/all.sql" ]; then \
			echo "Running seed data from seed_data/all.sql..."; \
			mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/all.sql; \
			echo "‚úÖ Seed data loaded successfully!"; \
		else \
			echo "‚ùå No seed data found. Creating default seed data..."; \
			make create-seed-data; \
		fi \
	else \
		echo "üå± Seeding default database with initial data..."; \
		if [ -f "seed_data/all.sql" ]; then \
			echo "Running seed data from seed_data/all.sql..."; \
			mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/all.sql; \
			echo "‚úÖ Seed data loaded successfully!"; \
		else \
			echo "‚ùå No seed data found. Creating default seed data..."; \
			make create-seed-data; \
		fi \
	fi

seed-domains:
	@if [ -n "$(MYSQL_DATABASE)" ]; then \
		echo "üå± Seeding domains table in $(MYSQL_DATABASE)..."; \
		if [ -f "seed_data/domains.sql" ]; then \
			mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/domains.sql; \
			echo "‚úÖ Domains seeded successfully!"; \
		else \
			echo "‚ùå seed_data/domains.sql not found!"; \
		fi \
	else \
		echo "üå± Seeding domains table in default database..."; \
		if [ -f "seed_data/domains.sql" ]; then \
			mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/domains.sql; \
			echo "‚úÖ Domains seeded successfully!"; \
		else \
			echo "‚ùå seed_data/domains.sql not found!"; \
		fi \
	fi

seed-users:
	@if [ -n "$(MYSQL_DATABASE)" ]; then \
		echo "üå± Seeding users table in $(MYSQL_DATABASE)..."; \
		if [ -f "seed_data/users.sql" ]; then \
			mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/users.sql; \
			echo "‚úÖ Users seeded successfully!"; \
		else \
			echo "‚ùå seed_data/users.sql not found!"; \
		fi \
	else \
		echo "üå± Seeding users table in default database..."; \
		if [ -f "seed_data/users.sql" ]; then \
			mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/users.sql; \
			echo "‚úÖ Users seeded successfully!"; \
		else \
			echo "‚ùå seed_data/users.sql not found!"; \
		fi \
	fi

seed-aliases:
	@echo "üå± Seeding aliases table..."
	@if [ -f "seed_data/aliases.sql" ]; then \
		mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/aliases.sql; \
		echo "‚úÖ Aliases seeded successfully!"; \
	else \
		echo "‚ùå seed_data/aliases.sql not found!"; \
	fi

seed-backups:
	@echo "üå± Seeding backups table..."
	@if [ -f "seed_data/backups.sql" ]; then \
		mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/backups.sql; \
		echo "‚úÖ Backups seeded successfully!"; \
	else \
		echo "‚ùå seed_data/backups.sql not found!"; \
	fi

seed-relocated:
	@echo "üå± Seeding relocated table..."
	@if [ -f "seed_data/relocated.sql" ]; then \
		mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/relocated.sql; \
		echo "‚úÖ Relocated seeded successfully!"; \
	else \
		echo "‚ùå seed_data/relocated.sql not found!"; \
	fi

seed-relays:
	@echo "üå± Seeding relays table..."
	@if [ -f "seed_data/relays.sql" ]; then \
		mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/relays.sql; \
		echo "‚úÖ Relays seeded successfully!"; \
	else \
		echo "‚ùå seed_data/relays.sql not found!"; \
	fi

seed-clients:
	@echo "üå± Seeding clients table..."
	@if [ -f "seed_data/clients.sql" ]; then \
		mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) < seed_data/clients.sql; \
		echo "‚úÖ Clients seeded successfully!"; \
	else \
		echo "‚ùå seed_data/clients.sql not found!"; \
	fi

create-seed-data:
	@echo "üìù Creating default seed data files..."
	@mkdir -p seed_data
	@echo "-- Seed data for domains table" > seed_data/domains.sql
	@echo "-- This file contains initial domain data for development/testing" >> seed_data/domains.sql
	@echo "" >> seed_data/domains.sql
	@echo "-- Insert seed data for domains" >> seed_data/domains.sql
	@echo "INSERT INTO domains (domain, transport, enabled) VALUES" >> seed_data/domains.sql
	@echo "('example.com', 'virtual', 1);" >> seed_data/domains.sql
	@echo "Seed data files created in seed_data/ directory"
	@echo "Edit the files and run 'make seed' to load the data"

# Test database management
test-db-setup:
	@echo "üß™ Setting up test database..."
	@echo "Creating test database if it doesn't exist..."
	@mysql -uroot -prootpassword -h$(MYSQL_HOST) -P$(MYSQL_PORT) -e "CREATE DATABASE IF NOT EXISTS sortingoffice_test;"
	@echo "Granting permissions to sortingoffice user..."
	@mysql -uroot -prootpassword -h$(MYSQL_HOST) -P$(MYSQL_PORT) -e "GRANT ALL PRIVILEGES ON sortingoffice_test.* TO 'sortingoffice'@'%';"
	@echo "Running migrations on test database..."
	@DATABASE_URL=mysql://sortingoffice:sortingoffice@$(MYSQL_HOST):$(MYSQL_PORT)/sortingoffice_test diesel migration run

test-db-clean:
	@echo "üßπ Cleaning test database..."
	@mysql -uroot -prootpassword -h$(MYSQL_HOST) -P$(MYSQL_PORT) -e "DROP DATABASE IF EXISTS sortingoffice_test;"

test-db-reset: test-db-clean test-db-setup
	@echo "üîÑ Test database reset complete"

# Production database management
prod-db-setup:
	@echo "üè≠ Setting up production database..."
	@echo "Creating production database if it doesn't exist..."
	@mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) -e "CREATE DATABASE IF NOT EXISTS sortingoffice;"
	@echo "Running migrations on production database..."
	@diesel migration run
	@echo "Seeding production database..."
	@make seed

prod-db-reset:
	@echo "‚ö†Ô∏è  WARNING: This will reset the production database!"
	@echo "Are you sure? (y/N)"
	@read -p "" confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		echo "Resetting production database..."; \
		mysql -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) -e "DROP DATABASE IF EXISTS sortingoffice;"; \
		make prod-db-setup; \
	else \
		echo "Operation cancelled."; \
	fi

# Database inspection commands
list-domains:
	@if [ -n "$(MYSQL_DATABASE)" ]; then \
		echo "Listing domains in $(MYSQL_DATABASE)..."; \
		$(MYSQL) -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) -N -e "SELECT * FROM domains;"; \
	else \
		echo "Listing domains in default database..."; \
		$(MYSQL_CMD) "SELECT * FROM domains;"; \
	fi

count-domains:
	@if [ -n "$(MYSQL_DATABASE)" ]; then \
		echo "Counting domains in $(MYSQL_DATABASE)..."; \
		$(MYSQL) -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -h$(MYSQL_HOST) -P$(MYSQL_PORT) $(MYSQL_DATABASE) -N -e "SELECT COUNT(*) FROM domains;"; \
	else \
		echo "Counting domains in default database..."; \
		$(MYSQL_CMD) "SELECT COUNT(*) FROM domains;"; \
	fi

list-aliases:
	@$(MYSQL_CMD) "SELECT * FROM aliases;"

count-aliases:
	@$(MYSQL_CMD) "SELECT COUNT(*) FROM aliases;"

list-users:
	@$(MYSQL_CMD) "SELECT * FROM users;"

count-users:
	@$(MYSQL_CMD) "SELECT COUNT(*) FROM users;"

list-relocated:
	@$(MYSQL_CMD) "SELECT * FROM relocated;"

count-relocated:
	@$(MYSQL_CMD) "SELECT COUNT(*) FROM relocated;"

list-relays:
	@$(MYSQL_CMD) "SELECT * FROM relays;"

count-relays:
	@$(MYSQL_CMD) "SELECT COUNT(*) FROM relays;"

list-clients:
	@$(MYSQL_CMD) "SELECT * FROM clients;"

count-clients:
	@$(MYSQL_CMD) "SELECT COUNT(*) FROM clients;"

list-databases:
	./scripts/list-databases.sh

# Help for database operations
db-help:
	@echo "üóÑÔ∏è  Database Management Commands"
	@echo "================================"
	@echo ""
	@echo "Migrations:"
	@echo "  make migrate           - Run pending migrations (default database or specify DATABASE_URL)"
	@echo "      e.g. make migrate DATABASE_URL=..."
	@echo "  make migrate-revert    - Revert last migration (default database or specify DATABASE_URL)"
	@echo "      e.g. make migrate-revert DATABASE_URL=..."
	@echo "  make migrate-reset     - Reset database (revert all, then run all; default or specify DATABASE_URL)"
	@echo "      e.g. make migrate-reset DATABASE_URL=..."
	@echo "  make migrate-all       - Run migrations on all configured databases"
	@echo ""
	@echo "Seed Data:"
	@echo "  make seed              - Seed database with all initial data (default or specify MYSQL_DATABASE, MYSQL_HOST, MYSQL_PORT)"
	@echo "      e.g. make seed MYSQL_DATABASE=sortingoffice_dev MYSQL_HOST=127.0.0.1 MYSQL_PORT=3308"
	@echo "  make seed-domains      - Seed only domains table"
	@echo "  make seed-users        - Seed only users table"
	@echo "  make seed-aliases      - Seed only aliases table"
	@echo "  make seed-backups      - Seed only backups table"
	@echo "  make seed-relocated    - Seed only relocated table"
	@echo "  make seed-relays       - Seed only relays table"
	@echo "  make seed-clients      - Seed only clients table"
	@echo "  make create-seed-data  - Create default seed data files"
	@echo ""
	@echo "Test Database:"
	@echo "  make test-db-setup     - Setup test database"
	@echo "  make test-db-clean     - Clean test database"
	@echo "  make test-db-reset     - Reset test database"
	@echo ""
	@echo "Production Database:"
	@echo "  make prod-db-setup     - Setup production database with seed data"
	@echo "  make prod-db-reset     - Reset production database (WARNING: destructive)"
	@echo ""
	@echo "Database Inspection:"
	@echo "  make list-domains      - List all domains"
	@echo "  make count-domains     - Count all domains"
	@echo "  make list-aliases      - List all aliases"
	@echo "  make count-aliases     - Count all aliases"
	@echo "  make list-users        - List all users"
	@echo "  make count-users       - Count all users"
	@echo "  make list-relocated    - List all relocated"
	@echo "  make count-relocated   - Count all relocated"
	@echo "  make list-relays       - List all relays"
	@echo "  make count-relays      - Count all relays"
	@echo "  make list-clients      - List all clients"
	@echo "  make count-clients     - Count all clients"
	@echo "  make list-databases    - List all configured databases (id, label, url) from config.toml"
	@echo "      e.g. make list-databases"
